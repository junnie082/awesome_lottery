# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

# name: Deploy to Amazon ECS

# on:
#   push:
#     branches: [ "deploy" ]

# .env:
#   AWS_REGION: ap-northeast-2                # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: for_alex/awesome_lottery           # set this to your Amazon ECR repository name
#   ECS_SERVICE: for_Alex_Awesome                 # set this to your Amazon ECS service name
#   ECS_CLUSTER: DevForAlex                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: ./task-definition.json # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: for_Alex_Awesome           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition

# permissions:
#   contents: read

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ .env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       .env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and
#         # push it to ECR so that it can
#         # be deployed to ECS.
#         # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
#         aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_REPOSITORY }}
        
#         docker build -t $ECR_REPOSITORY .

#         docker tag $ECR_REPOSITORY:latest ${{ secrets.AWS_REPOSITORY }}
        
#         docker push ${{ secrets.AWS_REPOSITORY }} 
        
#         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ .env.ECS_TASK_DEFINITION }}
#         container-name: ${{ .env.CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ .env.ECS_SERVICE }}
#         cluster: ${{ .env.ECS_CLUSTER }}
#         wait-for-service-stability: true


#   name: Deploy Django
on:
  push:
    branches:
      - deploy  # 또는 master, 원하는 배포 브랜치 지정


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2  # AWS_REGION 환경변수 설정 필요

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
 
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        echo "GEMINI_API_KEY =${{secrets.GEMINI_API_KEY}}" >> .env
        python -m pip install --upgrade pip
        python -m pip install django-environ
        pip install google
        pip install -q -U google-generativeai
        pip install -r requirements.txt


    - name: Run migrations
      run: |
        python manage.py migrate

    - name: Deploy to EC2 server
      run: |
        echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > for_Alex.pem
        chmod 600 for_Alex.pem

        ssh -i for_Alex.pem -o StrictHostKeyChecking=no ubuntu@13.125.88.89 << 'EOF'
          cd /home/ubuntu/awesome_lottery
          git fetch —all
          git reset —hard origin/deploy
          git pull origin deploy
          source ../mysite/bin/activate
          pip install -r requirements.txt  # 필요 시 패키지 설치
          sudo fuser -k 8000/tcp  # 기존 프로세스 종료
          nohup python manage.py runserver 0.0.0.0:8000 & 
          exit
        EOF



